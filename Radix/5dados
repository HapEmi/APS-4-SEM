
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_LEN 100     // Tamanho máximo de cada string
#define MAX_STRINGS 100 // Número máximo de strings
#define CHAR_RANGE 256  // Intervalo de caracteres ASCII

// Função para obter o caractere na posição 'pos' de uma string, considerando as strings como terminadas por '\0'
int getCharAt(char *str, int pos) {
    int len = strlen(str);
    if (pos < len) {
        return (unsigned char)str[pos];
    } else {
        return 0; // Caso a string seja menor, considera um valor menor
    }
}

// Função para realizar o Counting Sort com base na posição do caractere 'pos'
void countingSort(char *arr[], int n, int pos) {
    char *output[n];
    int count[CHAR_RANGE + 1] = {0}; // Inclui todos os valores ASCII

    // Conta a ocorrência de cada caractere na posição 'pos'
    for (int i = 0; i < n; i++) {
        int charIndex = getCharAt(arr[i], pos);
        count[charIndex + 1]++; // Incrementa na contagem
    }

    // Ajusta as contagens para obter as posições finais de cada caractere
    for (int i = 1; i <= CHAR_RANGE; i++) {
        count[i] += count[i - 1];
    }

    // Constrói o array ordenado com base na posição 'pos'
    for (int i = n - 1; i >= 0; i--) {
        int charIndex = getCharAt(arr[i], pos);
        output[count[charIndex]++] = arr[i];
    }

    // Copia os valores ordenados de volta para o array original
    for (int i = 0; i < n; i++) {
        arr[i] = output[i];
    }
}

// Função principal do Radix Sort para strings
void radixSort(char *arr[], int n, int maxLen) {
    // Percorre da última posição do caractere até a primeira
    for (int pos = maxLen - 1; pos >= 0; pos--) {
        countingSort(arr, n, pos);
    }
}

// Função para imprimir o array de strings
void printArray(char *arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%s\n", arr[i]);
    }
}

int main() {
    // Lista de strings a ser ordenada
    char *arr[] = { "Banana", "Uva", "Maca", "Laranja", "Abacaxi" };
    int n = sizeof(arr) / sizeof(arr[0]);
    int maxLen = 0;

    // Calcula o comprimento máximo da string para garantir que todas as posições sejam ordenadas
    for (int i = 0; i < n; i++) {
        int len = strlen(arr[i]);
        if (len > maxLen) {
            maxLen = len;
        }
    }

    printf("Antes da ordenação:\n");
    printArray(arr, n);

    radixSort(arr, n, maxLen);

    printf("\nDepois da ordenação:\n");
    printArray(arr, n);

    return 0;
}
